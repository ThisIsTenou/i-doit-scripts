#!/bin/bash

##
## i-doit jobs
##

##
## Copyright (C) 2017-18 synetics GmbH, <https://i-doit.com/>
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU Affero General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
## GNU Affero General Public License for more details.
##
## You should have received a copy of the GNU Affero General Public License
## along with this program. If not, see <http://www.gnu.org/licenses/>.
##

set -euo pipefail
IFS=$'\n\t'

##
## Configuration
##

CONFIGURATION_FILE="/etc/i-doit/i-doit.sh"

##--------------------------------------------------------------------------------------------------

function execute {
    local prefix=""
    local suffix="--user $IDOIT_USERNAME --password $IDOIT_PASSWORD --tenantId $TENANT_ID"
    local randomString=""
    randomString="$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 12)"
    local phpFile="${INSTANCE_PATH}/${randomString}.php"
    local statusCode=""

    log "Perform important background tasks for i-doit"

    test "$(whoami)" != "$APACHE_USER" && prefix="sudo -u $APACHE_USER "

    log "Archive i-doit logbook"
    eval "${prefix}${CONSOLE_BIN} logbook-archive $suffix" || \
        abort "Command 'logbook-archive' failed"
    log ""

    log "Cleanup i-doit rights"
    eval "${prefix}${CONSOLE_BIN} auth-cleanup $suffix" || \
        abort "Command 'auth-cleanup' failed"
    log ""

    log "Purge unfinished objects"
    eval "${prefix}${CONSOLE_BIN} system-objectcleanup --objectStatus 1 $suffix" || \
        abort "Command 'system-objectcleanup' failed"
    log ""

    log "Re-create search index"
    eval "${prefix}${CONSOLE_BIN} search-index $suffix" || \
        abort "Command 'search-index' failed"

    log "Send notifications"
    eval "${prefix}${CONSOLE_BIN} notifications-send $suffix" || \
        abort "Command 'notifications-send' failed"

    log "Clear PHP opcache"
            cat << EOF | eval "${prefix}tee $phpFile" > /dev/null || \
                abort "Unable to create file $phpFile"
<?php

if (function_exists('opcache_reset')) {
    opcache_reset() or exit(1);
}
EOF
    statusCode="$(curl -o /dev/null --silent --head --write-out '%{http_code}\n' --url "http://localhost/${phpFile}")"
    if [[ "$statusCode" != "200" ]]; then
        abort "Unable to clear OpCache by HTTP request"
    fi
    eval "${prefix}rm $phpFile" || abort "Unable to remove file"

    log "Re-cache by requesting i-doit Web GUI"
    statusCode="$(curl -o /dev/null --silent --head --write-out '%{http_code}\n' --url "http://localhost/")"
    if [[ "$statusCode" != "200" ]]; then
        abort "Unable to re-cache by HTTP request"
    fi

    log "Clear caches"
    eval "${prefix}rm -rf ${INSTANCE_PATH}/temp/*" || \
        abort "Unable to clear caches"

    log "Clear updates"
    eval "${prefix}rm -rf ${INSTANCE_PATH}/updates/versions/*" || \
        abort "Unable to clear updates"
}

function setup {
    test -f "$CONFIGURATION_FILE" || \
        abort "Missing configuration file '${CONFIGURATION_FILE}'"

    # shellcheck source=/dev/null
    source "$CONFIGURATION_FILE" || \
        abort "Unable to include configuration file"

    test -x "$CONSOLE_BIN" || \
        abort "Script '${CONSOLE_BIN}' not found"

    test -d "$INSTANCE_PATH" || \
        abort "No i-doit instance found under '${INSTANCE_PATH}'"
}

function log {
    echo -e "$1"
}

function finish {
    log "Done. Have fun :-)"
    exit 0
}

function abort {
    echo -e "$1"  1>&2
    echo "Operation failed. Please check what is wrong and try again." 1>&2
    exit 1
}

##--------------------------------------------------------------------------------------------------

if [[ "${BASH_SOURCE[0]}" = "$0" ]]; then
    setup && execute && finish
fi
